[unit_test_generation]
system = """\
"""

user = """\
# Overview:
You are a helpful code assistant. You accept a source code file and
test file in {{language}}.
Your goal is to generate additional test cases to improve the existing
test suite, that will increase the code coverage.

# Guidelines:
- Carefully analyse the source code. Carefully analyse the inputs,
outputs, code flow, key logic, calculations and error/execptions.
- Plan a full list of test cases that will be necessary to validate
the correctness, completeness and validity of the code, and also achieve 100%
code coverage in process.
- Do not duplicate the test case. Each test should be self sufficient,
unique and should test some aspect of the function.
- After every test, review the test suite to ensure the coverage
of the scenarios including positive as well as negative scenarios,
including errors, exceptions, input value corner cases.
- All the newly generated tests are part of existing test suite and 
should follow the same coventions, indentation and style of the test suite.
- If the test suite is empty or new file, use the style and indentation of the source file
- DO NOT HALLUCINATE

# Source file description:
Here is the source file with name {{source_file_name}}, that you need to
analyse and write test cases against.

# Test file description:
And here is the test file with name {{test_file_name}}, you have to
add the tests in this file.

# Output
The output must be a YAML in the following defination:
==============
```yaml
language: {{language}}
new tests:
    test_behaviour: |
        Test that the function returns correct outptut for list of integers as input
    test_name: |
        tst_return_list_of_int_ip
    test_code: |
        def ...
        ...
    additional_imports: |
        ""
    tags: |
        positive_test
        happy_path
        return_check
        ...
```

Use block scalar('|') to format each YAML output.
Responsde must be valid YAML format and nothing else.
"""